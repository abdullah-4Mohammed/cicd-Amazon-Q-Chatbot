
steps:

- task: Bash@3
  displayName: 'Create Application'
  inputs:
    targetType: 'inline'
    script: |
      set -euxo pipefail
      
      # Check if AWS CLI is installed
      if ! command -v aws &> /dev/null
      then
          echo "AWS CLI could not be found"
          exit 1
      fi

      # Check AWS CLI version
      aws_version=$(aws --version)
      echo "AWS CLI version: $aws_version"

      # Check if necessary variables are set
      if [ -z "$(serviceName)" ] || [ -z "$(identityCenterInstanceARN)" ] || [ -z "$(amazon-q-roleARN)" ]; then
        echo "One or more required variables are not set"
        exit 1
      fi

      output=$(aws qbusiness create-application --display-name "$(serviceName)" --identity-center-instance-arn "$(identityCenterInstanceARN)" --role-arn "$(amazon-q-roleARN)" --description "Amazon Q Chatbot" --debug)
      applicationId=$(echo $output | jq -r '.applicationId')
      echo "##vso[task.setvariable variable=application_Id;isOutput=true]$applicationId"
      echo "applicationId: $applicationId"
      echo "application_Id: $(application_Id)"
  name: createApplication


# - task: AWSCLI@1
#   displayName: 'Create Application'
#   inputs:
#     awsCredentials: '$(awsConnection)'
#     regionName: '$(region)'
#     awsCommand: 'qbusiness'
#     awsSubCommand: 'create-application'
#     awsArguments: >-
#       --display-name "$(serviceName)"
#       --identity-center-instance-arn "$(identityCenterInstanceARN)"
#       --role-arn "$(amazon-q-roleARN)"
#       --description "Amazon Q Chatbot"

#     scriptType: 'inline'
#     inlineScript: |
#       set -ex
#       applicationId=$(aws qbusiness create-application --display-name "$(serviceName)" --identity-center-instance-arn "$(identityCenterInstanceARN)" --role-arn "$(amazon-q-roleARN)" --description "Amazon Q Chatbot" --query 'applicationId' --output text)
#       echo "##vso[task.setvariable variable=application_Id;isOutput=true]$applicationId"
#       echo "applicationId: $applicationId"
#       echo "application_Id: $(application_Id)"
# #    continueOnError: false
# #    condition: succeededOrFailed()
#   name: createApplication

# - task: AWSCLI@1
#   displayName: 'Create Web Experience'
#   inputs:
#     awsCredentials: '$(awsConnection)'
#     regionName: '$(region)'
#     awsCommand: 'qbusiness'
#     awsSubCommand: 'create-web-experience'
#     awsArguments: >-
#       --application-id "$(application_Id)"  
#       --title "Test Chatbot - Title"
#       --subtitle "Test - subtitle"
#       --welcome-message "Hello, how can I help you today? - this is the welcome message"
#       --sample-prompts-control-mode "DISABLED"
#       --role-arn "$(amazon-q-roleARN)"
#   name: createWebExperience




# steps:

# - task: AWSCLI@1
#   displayName: 'Create Application'
#   inputs:
#     awsCredentials: '$(awsConnection)'
#     regionName: '$(region)'
#     awsCommand: 'qbusiness'
#     awsSubCommand: 'create-application'
#     awsArguments: >-
#       --display-name "$(serviceName)"
#       --identity-center-instance-arn "$(identityCenterInstanceARN)"
#       --role-arn "$(amazon-q-roleARN)"
#       --description "Amazon Q Chatbot"
#     scriptType: 'bash'
#     scriptLocation: 'inline'
#     inlineScript: |
#       output=$(aws qbusiness create-application --display-name "$(serviceName)" --identity-center-instance-arn "$(identityCenterInstanceARN)" --role-arn "$(amazon-q-roleARN)" --description "Amazon Q Chatbot")
#       applicationId=$(echo $output | jq -r '.applicationId')
#       echo "##vso[task.setvariable variable=q-applicationId]$applicationId"
#       echo "applicationId: $applicationId"
#       echo " q-applicationId: $q-applicationId"
#   continueOnError: false
#   condition: succeededOrFailed()
#   name: createApplication  # This name allows referencing the task output in subsequent steps.

# - task: AWSCLI@1
#   displayName: 'Create Web Experience'
#   inputs:
#     awsCredentials: '$(awsConnection)'
#     regionName: '$(region)'
#     inlineScript: |
#       echo "q-applicationId: $(q-applicationId)"
#       echo "applicationId: $(applicationId)"
#     awsCommand: 'qbusiness'
#     awsSubCommand: 'create-web-experience'
#     awsArguments: >-
#       --application-id "$(q-applicationId)"
#       --title "Test Chatbot - Title"
#       --subtitle "Test - subtitle"
#       --welcome-message "Hello, how can I help you today? - this is the welcome message"
#       --sample-prompts-control-mode "DISABLED"
#       --role-arn "$(amazon-q-roleARN)"
#   name: createWebExperience  # Naming this task for referencing in the next step.

# - task: AWSCLI@1
#   displayName: 'List Web Experiences'
#   inputs:
#     awsCredentials: '$(awsConnection)'
#     regionName: '$(region)'
#     awsCommand: 'qbusiness'
#     awsSubCommand: 'get-web-experience'
#     awsArguments: >-
#       --application-id "$(amazon-q-applicationId)"
#       --max-results 10

# - task: AWSCLI@1
#   displayName: 'Update Web Experience'
#   inputs:
#     awsCredentials: '$(awsConnection)'
#     regionName: '$(region)'
#     awsCommand: 'qbusiness'
#     awsSubCommand: 'update-web-experience'
#     awsArguments: >-
#       --application-id "$(amazon-q-applicationId)"
#       --web-experience-id "$(amazonQWebExperienceId)"
#       --role-arn "$(amazon-q-roleARN)"
#       --title "Updated Web Experience Title"
#       --subtitle "Updated subtitle of your web experience"
#       --welcome-message "Updated welcome message for your web experience"
#       --sample-prompts-control-mode "DISABLED"



#creating works fine

# - task: AWSCLI@1
#   displayName: 'Create Amazon Q Application'
#   inputs:
#     awsCredentials: '$(awsConnection)'
#     regionName: '$(region)'
#     awsCommand: 'qbusiness'
#     awsSubCommand: 'create-application'
#     awsArguments: >-
#       --display-name "$(serviceName)"
#       --identity-center-instance-arn "$(identityCenterInstanceARN)"
#       --role-arn "$(amazon-q-roleARN)"
#       --description "Amazon Q Chatbot"
# #      --encryption-configuration "kmsKeyId=auto-kendra-1"
# #      --attachments-configuration "attachmentsControlMode=ENABLED"
#   continueOnError: false
#   condition: succeededOrFailed()
#   name: createApplication  # This name allows referencing the task output in subsequent steps.

#end creating works fine
