steps:
- task: AWSShellScript@1
  displayName: 'Create Application'
  inputs:
    awsCredentials: '$(awsConnection)'
    regionName: '$(region)'
    scriptType: 'inline'
    inlineScript: |
      set -euxo pipefail

      # Try to create the application
      output=$(
        aws qbusiness create-application \
          --region "$(region)" \
          --display-name "$(serviceName)" \
          --identity-center-instance-arn "$(identityCenterInstanceARN)" \
          --role-arn "$(amazon-q-roleARN)" \
          --description "Amazon Q Chatbot" \
          --output json
      ) || true

      # If the application was not created, get the existing applicationId
      if [ -z "$output" ]; then
        output=$(aws qbusiness list-applications --region "$(region)" --output json)
        applicationId=$(
          echo "$output" | jq -r --arg serviceName "$(serviceName)" \
            '.applications[] | select(.displayName == $serviceName) | .applicationId'
        )
      else
        applicationId=$(echo "$output" | jq -r '.applicationId')
      fi

      # Set the pipeline variable
      echo "##vso[task.setvariable variable=application_Id;isOutput=true]$applicationId"

      # Print the applicationId for debugging
      echo "applicationId: $applicationId"
  name: createApplication

- task: AWSShellScript@1
  displayName: 'Create Web Experience'
  inputs:
    awsCredentials: '$(awsConnection)'
    regionName: '$(region)'
    scriptType: 'inline'
    inlineScript: |
      set -euxo pipefail

      # Check if the web experience already exists
      existingWebExperienceOutput=$(
        aws qbusiness list-web-experiences \
          --application-id "$(createApplication.application_Id)" \
          --output json
      )
      existingWebExperienceId=$(echo "$existingWebExperienceOutput" | jq -r '.webExperiences[0].webExperienceId')

      # If no matching web experience was found, create a new one
      if [ -z "$existingWebExperienceId" ] || [ "$existingWebExperienceId" == "null" ]; then
        webExperienceOutput=$(
          aws qbusiness create-web-experience \
            --region "$(region)" \
            --application-id "$(createApplication.application_Id)" \
            --role-arn "$(web-experience-roleARN)" \
            --title "$(web-title)" \
            --subtitle "$(web-subtitle)" \
            --welcome-message "$(web-welcome_message)" \
            --output json
        )
        webExperienceId=$(echo "$webExperienceOutput" | jq -r '.webExperienceId')
      else
        webExperienceId="$existingWebExperienceId"
      fi

      # Set the pipeline variable
      echo "##vso[task.setvariable variable=webExperience_Id;isOutput=true]$webExperienceId"

      # Print the webExperienceId for debugging
      echo "webExperienceId: $webExperienceId"
  name: createWebExperience




- task: AWSShellScript@1
  displayName: 'Create Index'
  inputs:
    awsCredentials: '$(awsConnection)'
    regionName: '$(region)'
    scriptType: 'inline'
    inlineScript: |
      # Check if the index already exists
      existingIndexOutput=$(
        aws qbusiness list-indices \
          --application-id "$(createApplication.application_Id)" \
          --output json
      )
      indices=$(echo "$existingIndexOutput" | jq '.indices')
      if [ "$indices" != "[]" ]; then
        existingIndexId=$(echo "$existingIndexOutput" | jq -r --arg indexName "$(indexName)" '.indices[] | select(.displayName == $indexName) | .indexId')
      else
        existingIndexId=""
      fi

      # If no matching index was found, create a new one
      if [ -z "$existingIndexId" ] || [ "$existingIndexId" == "null" ]; then
        indexOutput=$(
          aws qbusiness create-index \
            --application-id "$(createApplication.application_Id)" \
            --display-name "$(indexName)" \
            --type ENTERPRISE \
            --output json
        )
        indexId=$(echo "$indexOutput" | jq -r '.indexId')
      else
        indexId="$existingIndexId"
      fi

      echo "Index ID: $indexId"
      echo "##vso[task.setvariable variable=index_Id;isOutput=true]$indexId"
  name: createIndex



- task: AWSShellScript@1
  displayName: 'Create Data Source'
  inputs:
    awsCredentials: '$(awsConnection)'
    regionName: '$(region)'
    scriptType: 'inline'
    inlineScript: |
      set -euxo pipefail

      # S3 Configuration for the data source
      s3Config=$(cat << EOF
      {
        "bucket": "survey-assistant-datasource-bucket-use1",
        "roleArn": "arn:aws:iam::975050226089:role/service-role/QBusiness-DataSource-199kf"
      }
      EOF
      )

      # Check if the data source already exists
      existingDataSourceOutput=$(
        aws qbusiness list-data-sources \
          --application-id "$(createApplication.application_Id)" \
          --index-id "$(createIndex.index_Id) \
          --output json
      )
      existingDataSourceId=$(echo "$existingDataSourceOutput" | jq -r --arg dataSourceName "$(dataSourceName) '.dataSources[] | select(.name == $dataSourceName) | .dataSourceId')

      # If no matching data source was found, create a new one
      if [ -z "$existingDataSourceId" ] || [ "$existingDataSourceId" == "null" ]; then
        dataSourceOutput=$(
          aws qbusiness create-data-source \
            --region "$(region)" \
            --application-id "$(createApplication.application_Id)" \
            --index-id "$(createIndex.index_Id)" \
            --name "$(dataSourceName)" \
            --type "S3" \
            --s3-parameters "$s3Config" \
            --role-arn "$(dataSourceRoleARN)" \
            --output json
        )
        dataSourceId=$(echo "$dataSourceOutput" | jq -r '.dataSourceId')
      else
        dataSourceId="$existingDataSourceId"
      fi

      # Set the pipeline variable
      echo "##vso[task.setvariable variable=dataSource_Id;isOutput=true]$dataSourceId"

      # Print the dataSourceId for debugging
      echo "dataSourceId: $dataSourceId"
  name: createDataSource