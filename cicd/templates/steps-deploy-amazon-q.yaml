# steps:
# - task: AWSShellScript@1
#   displayName: 'Create Application'
#   inputs:
#     awsCredentials: '$(awsConnection)'
#     regionName: '$(region)'
#     scriptType: 'inline'
#     inlineScript: |
#       set -euxo pipefail

#       # Run the AWS CLI command
#       output=$(aws qbusiness create-application --region "$(region)" --display-name "$(serviceName)" --identity-center-instance-arn "$(identityCenterInstanceARN)" --role-arn "$(amazon-q-roleARN)" --description "Amazon Q Chatbot" --output json)

#       # Extract the applicationId using jq
#       applicationId=$(echo "$output" | jq -r '.applicationId')

#       # Set the pipeline variable
#       echo "##vso[task.setvariable variable=application_Id;isOutput=true]$applicationId"

#       # Print the applicationId for debugging
#       echo "applicationId: $applicationId"
#   name: createApplication
steps:
- task: AWSShellScript@1
  displayName: 'Create Application'
  inputs:
    awsCredentials: '$(awsConnection)'
    regionName: '$(region)'
    scriptType: 'inline'
    inlineScript: |
      set -euxo pipefail

      # Try to create the application
      output=$(aws qbusiness create-application --region "$(region)" --display-name "$(serviceName)" --identity-center-instance-arn "$(identityCenterInstanceARN)" --role-arn "$(amazon-q-roleARN)" --description "Amazon Q Chatbot" --output json) || true

      # If the application was not created, get the existing applicationId
      if [ -z "$output" ]; then
        output=$(aws qbusiness list-applications --region "$(region)" --output json)
        applicationId=$(echo "$output" | jq -r --arg serviceName "$(serviceName)" '.applications[] | select(.displayName == $serviceName) | .applicationId')
      else
        applicationId=$(echo "$output" | jq -r '.applicationId')
      fi

      # Set the pipeline variable
      echo "##vso[task.setvariable variable=application_Id;isOutput=true]$applicationId"

      # Print the applicationId for debugging
      echo "applicationId: $applicationId"
  name: createApplication


- task: AWSShellScript@1
  displayName: 'Create Web Experience'
  inputs:
    awsCredentials: '$(awsConnection)'
    regionName: '$(region)'
    scriptType: 'inline'
    inlineScript: |
      set -euxo pipefail

      # Check if the web experience already exists
      existingWebExperienceOutput=$(aws qbusiness list-web-experiences --region "$(region)" --application-id "$(createApplication.application_Id)" --output json)
      existingWebExperienceId=$(echo "$existingWebExperienceOutput" | jq -r --arg serviceName "$(serviceName)" '.webExperiences[] | select(.displayName == $serviceName) | .webExperienceId')

      # If no matching web experience was found, create a new one
      if [ -z "$existingWebExperienceId" ]; then
        webExperienceOutput=$(aws qbusiness create-web-experience --region "$(region)" --application-id "$(createApplication.application_Id)" --role-arn "$(web-experience-roleARN)" --output json)
        webExperienceId=$(echo "$webExperienceOutput" | jq -r '.webExperienceId')
      else
        webExperienceId="$existingWebExperienceId"
      fi

      # Set the pipeline variable
      echo "##vso[task.setvariable variable=webExperience_Id;isOutput=true]$webExperienceId"

      # Print the webExperienceId for debugging
      echo "webExperienceId: $webExperienceId"

  name: createWebExperience


