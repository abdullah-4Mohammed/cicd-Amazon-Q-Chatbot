steps:
- task: AWSShellScript@1
  displayName: 'Create Application'
  inputs:
    awsCredentials: '$(awsConnection)'
    regionName: '$(region)'
    scriptType: 'inline'
    inlineScript: |
      set -euxo pipefail

      # List applications and get the application ID if it exists
      output=$(aws qbusiness list-applications --region "$(region)" --output json)
      applicationId=$(
        echo "$output" | jq -r --arg serviceName "$(serviceName)" \
          '.applications[] | select(.displayName == $serviceName) | .applicationId'
      )

      # If the application does not exist, create a new one
      if [ -z "$applicationId" ] || [ "$applicationId" == "null" ]; then
        output=$(
          aws qbusiness create-application \
            --region "$(region)" \
            --display-name "$(serviceName)" \
            --identity-center-instance-arn "$(identityCenterInstanceARN)" \
            --role-arn "$(amazon-q-roleARN)" \
            --description "Amazon Q Chatbot" \
            --output json
        )
        applicationId=$(echo "$output" | jq -r '.applicationId')
      fi

      # Set the pipeline variable
      echo "##vso[task.setvariable variable=application_Id;isOutput=true]$applicationId"

      # Print the applicationId for debugging
      echo "applicationId: $applicationId"
  name: createApplication



# - task: AWSShellScript@1
#   displayName: 'Create Web Experience'
#   inputs:
#     awsCredentials: '$(awsConnection)'
#     regionName: '$(region)'
#     scriptType: 'inline'
#     inlineScript: |
#       set -euxo pipefail

#       # Check if the web experience already exists
#       existingWebExperienceOutput=$(
#         aws qbusiness list-web-experiences \
#           --application-id "$(createApplication.application_Id)" \
#           --output json
#       )
#       existingWebExperienceId=$(echo "$existingWebExperienceOutput" | jq -r '.webExperiences[0].webExperienceId')

#       # If no matching web experience was found, create a new one
#       if [ -z "$existingWebExperienceId" ] || [ "$existingWebExperienceId" == "null" ]; then
#         webExperienceOutput=$(
#           aws qbusiness create-web-experience \
#             --region "$(region)" \
#             --application-id "$(createApplication.application_Id)" \
#             --role-arn "$(web-experience-roleARN)" \
#             --title "$(web-title)" \
#             --subtitle "$(web-subtitle)" \
#             --welcome-message "$(web-welcome_message)" \
#             --output json
#         )
#         webExperienceId=$(echo "$webExperienceOutput" | jq -r '.webExperienceId')
#       else
#         webExperienceId="$existingWebExperienceId"
#       fi

#       # Set the pipeline variable
#       echo "##vso[task.setvariable variable=webExperience_Id;isOutput=true]$webExperienceId"

#       # Print the webExperienceId for debugging
#       echo "webExperienceId: $webExperienceId"
#   name: createWebExperience


# - task: AWSShellScript@1
#   displayName: 'Create Index'
#   inputs:
#     awsCredentials: '$(awsConnection)'
#     regionName: '$(region)'
#     scriptType: 'inline'
#     inlineScript: |
#       # Check if the index already exists
#       existingIndexOutput=$(
#         aws qbusiness list-indices \
#           --application-id "$(createApplication.application_Id)" \
#           --output json
#       )
#       indices=$(echo "$existingIndexOutput" | jq '.indices')
#       if [ "$indices" != "[]" ]; then
#         existingIndexId=$(echo "$existingIndexOutput" | jq -r --arg indexName "$(indexName)" '.indices[] | select(.displayName == $indexName) | .indexId')
#       else
#         existingIndexId=""
#       fi

#       # If no matching index was found, create a new one
#       if [ -z "$existingIndexId" ] || [ "$existingIndexId" == "null" ]; then
#         indexOutput=$(
#           aws qbusiness create-index \
#             --application-id "$(createApplication.application_Id)" \
#             --display-name "$(indexName)" \
#             --type ENTERPRISE \
#             --output json
#         )
#         indexId=$(echo "$indexOutput" | jq -r '.indexId')
#       else
#         indexId="$existingIndexId"
#       fi

#       echo "Index ID: $indexId"
#       echo "##vso[task.setvariable variable=index_Id;isOutput=true]$indexId"
#   name: createIndex



# - task: AWSShellScript@1
#   displayName: 'Create Data Source'
#   inputs:
#     awsCredentials: '$(awsConnection)'
#     regionName: '$(region)'
#     scriptType: 'inline'
#     inlineScript: |
#       set -euxo pipefail

#       # S3 Configuration for the data source

#       s3Config=$(cat <<EOF
#       {
#         "connectionConfiguration": {
#           "repositoryEndpointMetadata": {
#             "BucketName": "$(datasourceBucketName)"
#           }
#         },
#         "repositoryConfigurations": {
#           "document": {
#             "fieldMappings": [
#               {
#                 "indexFieldName": "documentTitle",
#                 "indexFieldType": "STRING",
#                 "dataSourceFieldName": "Title"
#               },
#               {
#                 "indexFieldName": "documentContent",
#                 "indexFieldType": "STRING",
#                 "dataSourceFieldName": "Content"
#               }
#             ]
#           }
#         },
#         "additionalProperties": {
#           "inclusionPatterns": ["*.docx"],
#           "exclusionPatterns": [],
#           "inclusionPrefixes": [],
#           "exclusionPrefixes": [],
#           "aclConfigurationFilePath": "",
#           "metadataFilesPrefix": "",
#           "maxFileSizeInMegaBytes": "50"
#         },
#         "syncMode": "FULL_CRAWL",
#         "type": "S3",
#         "version": "1.0.0"
#       }
#       EOF
#       )
      
#       echo "$s3Config"

#       # Check if the data source already exists
#       existingDataSourceOutput=$(
#         aws qbusiness list-data-sources \
#           --application-id "$(createApplication.application_Id)" \
#           --index-id "$(createIndex.index_Id)" \
#           --output json
#       )
#       echo "existingDataSourceOutput: $existingDataSourceOutput"

#       existingDataSourceId=$(echo "$existingDataSourceOutput" | jq -r --arg dataSourceName "$(dataSourceName)" '.dataSources[] | select(.displayName == $dataSourceName) | .dataSourceId')
#       echo "existingDataSourceId: $existingDataSourceId"

#       # If no matching data source was found, create a new one
#       if [ -z "$existingDataSourceId" ] || [ "$existingDataSourceId" == "null" ]; then
#         dataSourceOutput=$(
#           aws qbusiness create-data-source \
#             --application-id "$(createApplication.application_Id)" \
#             --index-id "$(createIndex.index_Id)" \
#             --display-name "$(dataSourceName)" \
#             --configuration "$s3Config" \
#             --role-arn "$(dataSourceRoleARN)" \
#             --output json
#         )
#         dataSourceId=$(echo "$dataSourceOutput" | jq -r '.dataSourceId')
#       else
#         dataSourceId="$existingDataSourceId"
#       fi

#       # Set the pipeline variable
#       echo "##vso[task.setvariable variable=dataSource_Id;isOutput=true]$dataSourceId"

#       # Print the dataSourceId for debugging
#       echo "dataSourceId: $dataSourceId"
#   name: createDataSource

# - task: AWSShellScript@1
#   displayName: 'Create Retriever'
#   inputs:
#     awsCredentials: '$(awsConnection)'
#     regionName: '$(region)'
#     scriptType: 'inline'
#     inlineScript: |
#       set -euxo pipefail

#       # Native Retriever Configuration
#       retrieverConfig=$(cat <<EOF
#       {
#         "nativeIndexConfiguration": {
#           "indexId": "$(createIndex.index_Id)"
#         }
#       }
#       EOF
#       )
      
#       echo "$retrieverConfig"

#       # Check if the retriever already exists
#       existingRetrieverOutput=$(
#         aws qbusiness list-retrievers \
#           --application-id "$(createApplication.application_Id)" \
#           --output json
#       )
#       existingRetrieverId=$(echo "$existingRetrieverOutput" | jq -r --arg retrieverName "$(retrieverName)" '.retrievers[] | select(.displayName == $retrieverName) | .retrieverId')
      
#       # If no matching retriever was found, create a new one
#       if [ -z "$existingRetrieverId" ] || [ "$existingRetrieverId" == "null" ]; then
#         retrieverOutput=$(
#           aws qbusiness create-retriever \
#             --application-id "$(createApplication.application_Id)" \
#             --type "$(retrieverType)" \
#             --display-name "$(retrieverName)" \
#             --configuration "$retrieverConfig" \
#             --role-arn "$(retrieverRoleARN)" \
#             --output json
#         )
#         retrieverId=$(echo "$retrieverOutput" | jq -r '.retrieverId')
#       else
#         retrieverId="$existingRetrieverId"
#       fi

#       # Set the pipeline variable
#       echo "##vso[task.setvariable variable=retriever_Id;isOutput=true]$retrieverId"

#       # Print the retrieverId for debugging
#       echo "retrieverId: $retrieverId"
#   name: createRetriever


# - task: AWSShellScript@1
#   displayName: 'Update Web Experience'
#   inputs:
#     awsCredentials: '$(awsConnection)'
#     regionName: '$(region)'
#     scriptType: 'inline'
#     inlineScript: |
#       set -euxo pipefail

#       # Update the web experience
#       aws qbusiness update-web-experience \
#         --application-id "$(createApplication.application_Id)" \
#         --web-experience-id "$(createWebExperience.webExperience_Id)" \
#         --title "$(web-title)" \
#         --subtitle "$(web-subtitle)" \
#         --welcome-message "$(web-welcome_message)" \
#         --output json
#   name: updateWebExperiencece