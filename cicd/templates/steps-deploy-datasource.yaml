steps:
- task: AWSShellScript@1
  displayName: 'Create Data Source'
  inputs:
    awsCredentials: '$(awsConnection)'
    regionName: '$(region)'
    scriptType: 'inline'
    inlineScript: |
      set -euxo pipefail

      # S3 Configuration for the data source

      s3Config=$(cat <<EOF
      {
        "connectionConfiguration": {
          "repositoryEndpointMetadata": {
            "BucketName": "$(datasourceBucketName)"
          }
        },
        "repositoryConfigurations": {
          "document": {
            "fieldMappings": [
              {
                "indexFieldName": "documentTitle",
                "indexFieldType": "STRING",
                "dataSourceFieldName": "Title"
              },
              {
                "indexFieldName": "documentContent",
                "indexFieldType": "STRING",
                "dataSourceFieldName": "Content"
              }
            ]
          }
        },
        "additionalProperties": {
          "inclusionPatterns": ["*.docx"],
          "exclusionPatterns": [],
          "inclusionPrefixes": [],
          "exclusionPrefixes": [],
          "aclConfigurationFilePath": "",
          "metadataFilesPrefix": "",
          "maxFileSizeInMegaBytes": "50"
        },
        "syncMode": "FULL_CRAWL",
        "type": "S3",
        "version": "1.0.0"
      }
      EOF
      )
      
      echo "$s3Config"

      # Check if the data source already exists
      existingDataSourceOutput=$(
        aws qbusiness list-data-sources \
          --application-id "$(createApplication.application_Id)" \
          --index-id "$(createIndex.index_Id)" \
          --output json
      )
      echo "existingDataSourceOutput: $existingDataSourceOutput"

      existingDataSourceId=$(echo "$existingDataSourceOutput" | jq -r --arg dataSourceName "$(dataSourceName)" '.dataSources[] | select(.displayName == $dataSourceName) | .dataSourceId')
      echo "existingDataSourceId: $existingDataSourceId"

      # If no matching data source was found, create a new one
      if [ -z "$existingDataSourceId" ] || [ "$existingDataSourceId" == "null" ]; then
        dataSourceOutput=$(
          aws qbusiness create-data-source \
            --application-id "$(createApplication.application_Id)" \
            --index-id "$(createIndex.index_Id)" \
            --display-name "$(dataSourceName)" \
            --configuration "$s3Config" \
            --role-arn "$(dataSourceRoleARN)" \
            --output json
        )
        dataSourceId=$(echo "$dataSourceOutput" | jq -r '.dataSourceId')
      else
        dataSourceId="$existingDataSourceId"
      fi

      # Set the pipeline variable
      echo "##vso[task.setvariable variable=dataSource_Id;isOutput=true]$dataSourceId"

      # Print the dataSourceId for debugging
      echo "dataSourceId: $dataSourceId"
  name: createDataSource