steps:
- task: AWSShellScript@1
  displayName: 'Create Retriever'
  inputs:
    awsCredentials: '$(awsConnection)'
    regionName: '$(region)'
    scriptType: 'inline'
    inlineScript: |
      set -euxo pipefail

      # Native Retriever Configuration
      retrieverConfig=$(cat <<EOF
      {
        "nativeIndexConfiguration": {
          "indexId": "$(createIndex.index_Id)"
        }
      }
      EOF
      )
      
      echo "$retrieverConfig"

      # Check if the retriever already exists
      existingRetrieverOutput=$(
        aws qbusiness list-retrievers \
          --application-id "$(createApplication.application_Id)" \
          --output json
      )
      existingRetrieverId=$(echo "$existingRetrieverOutput" | jq -r --arg retrieverName "$(retrieverName)" '.retrievers[] | select(.displayName == $retrieverName) | .retrieverId')
      
      # If no matching retriever was found, create a new one
      if [ -z "$existingRetrieverId" ] || [ "$existingRetrieverId" == "null" ]; then
        retrieverOutput=$(
          aws qbusiness create-retriever \
            --application-id "$(createApplication.application_Id)" \
            --type "$(retrieverType)" \
            --display-name "$(retrieverName)" \
            --configuration "$retrieverConfig" \
            --role-arn "$(createDataSourceRole.qBusinessDataSourceRoleARN)" \
            --output json
        )
        retrieverId=$(echo "$retrieverOutput" | jq -r '.retrieverId')
      else
        retrieverId="$existingRetrieverId"
      fi

      # Set the pipeline variable
      echo "##vso[task.setvariable variable=retriever_Id;isOutput=true]$retrieverId"

      # Print the retrieverId for debugging
      echo "retrieverId: $retrieverId"
  name: createRetriever